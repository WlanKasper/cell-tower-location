/* 
 * Cell Tower Geolocation
 *
 * This is a cell tower geolocation converter on the OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct CoordinatesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> CoordinatesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CoordinatesApiClient<C> {
        CoordinatesApiClient {
            configuration: configuration,
        }
    }
}

pub trait CoordinatesApi {
    fn decode_wgs84(&self, wgs84: ::models::Value) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn encode_wgs84(&self, latitude: ::models::Value, longitude: ::models::Value, inner_radiuse: ::models::Value, uncertainty_radiuse: ::models::Value, offset_angle: ::models::Value, included_angle: ::models::Value, confidence: ::models::Value) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>CoordinatesApi for CoordinatesApiClient<C> {
    fn decode_wgs84(&self, wgs84: ::models::Value) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("wgs84", &wgs84.to_string());
            query.finish()
        };
        let uri_str = format!("{}/wgs84/decode?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn encode_wgs84(&self, latitude: ::models::Value, longitude: ::models::Value, inner_radiuse: ::models::Value, uncertainty_radiuse: ::models::Value, offset_angle: ::models::Value, included_angle: ::models::Value, confidence: ::models::Value) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("latitude", &latitude.to_string());
            query.append_pair("longitude", &longitude.to_string());
            query.append_pair("innerRadiuse", &inner_radiuse.to_string());
            query.append_pair("uncertaintyRadiuse", &uncertainty_radiuse.to_string());
            query.append_pair("offsetAngle", &offset_angle.to_string());
            query.append_pair("includedAngle", &included_angle.to_string());
            query.append_pair("confidence", &confidence.to_string());
            query.finish()
        };
        let uri_str = format!("{}/wgs84/encode?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

}
